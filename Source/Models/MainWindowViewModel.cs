//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using Colt3.IngersollRand;

namespace NSIRDriver {
    
    public partial class MainWindowViewModel : INotifyPropertyChanged {
        public MainWindowViewModel() {
			this.irController=null;
        }
        public event PropertyChangedEventHandler PropertyChanged;
        public void firePropertyChanged(string propertyName) {
            if ((this.PropertyChanged != null)) {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        public void firePropertyChanged(MethodBase mb) {
            int n;

            if (((n = mb.Name.Length) 
                        > 4)) {
                if (((string.Compare(mb.Name.Substring(0, 3), "get", true) == 0) 
                            || (string.Compare(mb.Name.Substring(0, 3), "set", true) == 0))) {
                    firePropertyChanged(mb.Name.Substring(4));
                }
            }
        }


		/// <summary>backing-store for property windowTop of type <b>double</b>.</summary>
		/// <seealso name="windowTop"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowTop;

		/// <summary>property windowTop.</summary>
		/// <seealso name="_windowTop"/>
		public double windowTop {
			get { return _windowTop; }
			set { _windowTop = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}


		/// <summary>backing-store for property windowLef of type <b>double</b>.</summary>
		/// <seealso name="windowLef"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowLeft;

		/// <summary>property windowLef.</summary>
		/// <seealso name="_windowLef"/>
		public double windowLeft {
			get { return _windowLeft; }
			set { _windowLeft = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}


		/// <summary>backing-store for property windowWidth of type <b>double</b>.</summary>
		/// <seealso name="windowWidth"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowWidth;

		/// <summary>property windowWidth.</summary>
		/// <seealso name="_windowWidth"/>
		public double windowWidth {
			get { return _windowWidth; }
			set { _windowWidth = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

		/// <summary>backing-store for property windowHeight of type <b>double</b>.</summary>
		/// <seealso name="windowHeight"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		double _windowHeight;

		/// <summary>property windowHeight.</summary>
		/// <seealso name="_windowHeight"/>
		public double windowHeight {
			get { return _windowHeight; }
			set { _windowHeight = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}


		/// <summary>backing-store for property irController of type <b>IngersollRandController</b>.</summary>
		/// <seealso name="irController"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		IngersollRandController _irController;

		/// <summary>property irController.</summary>
		/// <seealso name="_irController"/>
		public IngersollRandController irController {
			get { return _irController; }
			set { _irController = value; firePropertyChanged(MethodBase.GetCurrentMethod());
				//_connected=irController==null;
				//this.firePropertyChanged("canConnect");
				//this.firePropertyChanged("canDisconnect");
				this.canConnect=irController==null;
				this.canDisconnect=irController!=null;
			}
		}

		//bool _connected;
		//public bool canConnect { get { return !_connected; } }
		//public bool canDisconnect { get { return _connected; } }

		/// <summary>backing-store for property canConnect of type <b>bool</b>.</summary>
		/// <seealso name="canConnect"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		bool _canConnect;

		/// <summary>property canConnect.</summary>
		/// <seealso name="_canConnect"/>
		public bool canConnect {
			get { return _canConnect; }
			set { _canConnect = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

		/// <summary>backing-store for property canDisconnect of type <b>bool</b>.</summary>
		/// <seealso name="canDisconnect"/>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		bool _canDisconnect;

		/// <summary>property canDisconnect.</summary>
		/// <seealso name="_canDisconnect"/>
		public bool canDisconnect {
			get { return _canDisconnect; }
			set { _canDisconnect = value; firePropertyChanged(MethodBase.GetCurrentMethod()); }
		}

	}
}

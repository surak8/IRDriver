//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Reflection;
using System.Windows;
namespace NSIRDriver {
	public partial class MainWindow : Window {
		#region constants
		const string FRAME_KEY = "Main Window Frame";
		string HOST_IP_ADDRESS1 = "192.168.105.160"; // Commercial Breech
		string HOST_IP_ADDRESS = "192.168.105.161"; // Commercial Breech
		int HOST_PORT = 1069;
		#endregion
		#region fields
		MainWindowViewModel _vm;
		#endregion
		#region ctor
		public MainWindow() {
			this.DataContext = (_vm = new MainWindowViewModel());
			InitializeComponent();
		}
		#endregion
		void doConnect(object sender, RoutedEventArgs e) {
			Colt3.IngersollRand.IngersollRandController tmp;
			//Utility.logger.log(MethodBase.GetCurrentMethod());
			if (_vm.irController==null) {
				tmp=new Colt3.IngersollRand.IngersollRandController();
#if true
				if (tmp.initialize(HOST_IP_ADDRESS, HOST_PORT, null, null, null)) {
					_vm.irController=tmp;
				}
#else
				if (tmp.initialize(HOST_IP_ADDRESS, HOST_PORT, Utility.logger, m1, m2)) {
					_vm.irController=tmp;
				}
#endif
			}
		}
		void m2(string remoteEndPoint, bool up) {
			Utility.logger.log(MethodBase.GetCurrentMethod(), "Endpoint="+remoteEndPoint+", isUp="+up+".");
		}
		void m1(string[] fields) {
			Utility.logger.log(MethodBase.GetCurrentMethod(), "Fields are: "+fields+".");
		}
#region window-handling methods
		void Window1_SizeChanged(object sender, SizeChangedEventArgs e) {
			Utility.saveWindowBoundsToRegistry(this, FRAME_KEY);
		}
		void Window1_LocationChanged(object sender, System.EventArgs e) {
			Utility.saveWindowBoundsToRegistry(this, FRAME_KEY);
		}
		void Window1_Initialized(object sender, System.EventArgs e) {
			double left, top, width, height;
			if (Utility.retrieveWindowBounds(FRAME_KEY, out left, out top, out width, out height)) {
				//System.Diagnostics.Trace.WriteLine("Here");
				_vm.windowTop = top;
				_vm.windowLeft = left;
				_vm.windowWidth = width;
				_vm.windowHeight = height;
			} else {
				_vm.windowWidth = 325;
				_vm.windowHeight = 225;
				_vm.windowLeft = (SystemParameters.PrimaryScreenWidth - _vm.windowWidth) / 2.0;
				_vm.windowTop = (SystemParameters.PrimaryScreenHeight - _vm.windowHeight) / 2.0;
			}
		}
#endregion
		void doDisconnect(object sender, RoutedEventArgs e) {
			if (_vm.irController!=null) {
				_vm.irController.Dispose();
				_vm.irController=null;
				//_vm.irController.shutdown();
				//_vm.ir
			}
		}
	}
}